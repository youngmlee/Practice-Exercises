// Format = question, my solution, leetcode solution //

// Easy Difficulty //

/* Reverse String: Write a function that takes a string as input and returns the string reversed.

Example:
Given s = "hello", return "olleh". */

var reverseString = function(s) {
    var arr = s.split('')
    var reversed = arr.reverse()
    return reversed.join('')
};

/* Fizz Buzz: Write a program that outputs the string representation of numbers from 1 to n.

But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.

Example:

n = 15,

Return:
[
    "1",
    "2",
    "Fizz",
    "4",
    "Buzz",
    "Fizz",
    "7",
    "8",
    "Fizz",
    "Buzz",
    "11",
    "Fizz",
    "13",
    "14",
    "FizzBuzz"
] */

var fizzBuzz = function(n) {
  const finalArr = []
  for (let i = 1; i <= n; i++) {
    if (i % 3 === 0 && i % 5 === 0) {
      finalArr.push('FizzBuzz')
    }
    else if (i % 3 === 0) {
      finalArr.push('Fizz')
    }
    else if (i % 5 === 0) {
      finalArr.push('Buzz')
    }
    else {
      finalArr.push(i.toString())
    }
  }
  return finalArr
};

/* Add Strings: Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.

Note:

The length of both num1 and num2 is < 5100.
Both num1 and num2 contains only digits 0-9.
Both num1 and num2 does not contain any leading zero.
You must not use any built-in BigInteger library or convert the inputs to integer directly. */

var addStrings = function(num1, num2) {
  const number1 = +num1
  const number2 = +num2
  return (number1 + number2).toString()
};

/* Find the Difference: Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:

Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added. */

var findTheDifference = function(s, t) {
    const sArr = s.split('')
    const tArr = t.split('')
    const sSorted = sArr.sort()
    const tSorted = tArr.sort()
    for (let i = 0; i < tSorted.length; i++) {
        if (sSorted[i] !== tSorted[i]) {
            return tSorted[i]
        }
    }
};

/* Reverse Integer: Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output:  321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows. */

var reverse = function(x) {
  const xStr = x.toString()
  let arr = xStr.split('')
  let negative = undefined
  let filtered = []
  if (arr[0] === '-') {
    arr = arr.slice(1)
    negative = true
  }
  const reversedArr = arr.reverse()
  for (let i = 0; i < reversedArr.length; i++) {
    if (+reversedArr[i] > 0) {
      filtered = reversedArr.slice(0, i+1)
    }
  }

  if (negative && (-(+filtered.join('')) < -2147483647)) {
    return 0
  }
  else if (negative) {
    return -(+filtered.join(''))
  }
  else if (+filtered.join('') > 2147483647) {
    return 0
  }
  else {
    return +filtered.join('')
  }
};

// Medium Difficulty //

// Hard Difficulty //
